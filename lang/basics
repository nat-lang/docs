
let output = [];

let prefix typeset = output.push . GuideTexDoc;
let prefix codeblock = output.push . Codeblock;

let main = () => Generator(output, serialize);

typeset tex"
  \textbf{Basics}
  \hfill \\
  \hfill \\
  Nat is a simple language, consisting of functions and the objects
  that functions act on. To define a function, introduce a variable and then
  do something with it after a fat arrow.
";

codeblock "let f = x => x + 1;";

typeset tex"
  \textbf{Primitives}
  \hfill \\
  \hfill \\
  Certain primitive objects are always available: numbers, truth values, strings, and symbols.
  Alongside these objects are basic functions for evaluating equality, and for doing math, boolean
  logic, and string manipulation.
  \hfill \\
  \hfill \\
  You can, for instance, do arithmetic.
";

codeblock "print 1 + 1;";

typeset tex"You can also do boolean logic.";

codeblock "print true and false;";

typeset tex"As well as string concatenation, indexing, and substitution.";

codeblock "print #{quote("despair")} + #{quote(" ")} + #{quote("young")};
print #{quote("aged")}[2];
print #{quote("aged")}[2] = #{quote("i")};";

typeset tex"You can store values in variables.";

codeblock "let x = 1;
let y = 1;

print x + y;";

typeset tex"In fact, both $+$ and $print$ are variables that point to functions
defined by the compiler.";

codeblock "print +;
print print;";

typeset tex"To define your own function, introduce a bound variable, in this
case $x$, and then do something with it after a fat arrow.";

codeblock "let +1 = x => x + 1;
print +1(1);";

typeset tex"Functions are just another kind of object -- they need not be attached
to a variable, and they can be passed to other functions. They can also have
multiple arguments.";

codeblock "let compose = (f, g, x) => f(g(x));
print compose(x => x + 1, x => x - 1, 0);";