
let output = [];
let prefix typeset = output.push . GuideTexDoc;
let prefix codeblock = output.push . Codeblock;
let main = () => Generator(output, serialize);

typeset tex"
\textbf{Objects}
\hfill \\
\hfill \\
\textbf{nat} defines a number of objects for structuring
other objects: sets, sequences, maps, and trees.
\hfill \\
\hfill \\
1. Sets
\hfill \\
\hfill \\
To make a set, use curly braces.
";

codeblock "let x = {1, 2, 3};";

typeset tex"The set object comes with some familiar functions,
which you can access with the $object.function$ syntax. Some functions
have terser symbolic aliases that can be used as infixes.";

codeblock "let x = {1, 2, 3}.union({3, 4, 5});
print x.elements().values;

// Or equivalently:

let y = {1, 2, 3} & {3, 4, 5};
print x == y;
";

typeset tex"It's also possible to make a set by specifying
conditions that its elements satisfy. We call this a \textit{set comprehension}.";

codeblock "let x = {a | a in {true,false}, a};
print x.elements().values;";

typeset tex"When using the comprehension syntax, we always introduce a bound
variable and a source object with a \textit{variable in object} phrase.
These are the \textit{generators} for the comprehensions. Once a variable has been
introduced, we can restrict it with any number of predicates to its right. We can
also refer to it within other generators to its right.";

codeblock "let x = {b | a in {{1, 2}, {3, 4}}, b in a, b not in {2, 3}};
print x.elements().values;";

typeset tex"While they're not the same as functions, sets can be applied to arguments,
so that in certain situations they're indistinguishable from their characteristic functions.";

codeblock "let x = {1, 2, 3};
print x(1);
print x(4);";

typeset tex"Arbitrary expressions can occur in the body of set comprehensions, including
other set comprehensions. (There is a caveat -- such expressions must be hashable. We will
gloss over this detail for the moment.)";

codeblock "let x = {(x => x + 1)(x) | x in {1,2,3}};
print x.elements().values;";

typeset tex"
2. Sequences
\hfill \\
\hfill \\
A sequence is a totally ordered multiset. To make a sequence, use square brackets.";

codeblock "let x = [1, 2, 3];
print x.values;";

